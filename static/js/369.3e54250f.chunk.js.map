{"version":3,"file":"static/js/369.3e54250f.chunk.js","mappings":"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","sources":["api/api.js","components/AmountInput/AmountInput.jsx","components/OrderTable/OrderTable.styled.js","components/OrderTable/OrderTable.jsx","schema.js","redux/user/selectors.js","components/CustomerForm/CustomerForm.jsx","data/address.js","components/Map/Map.jsx","pages/Cart/Cart.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = `https://delivery-5pcr.onrender.com/api`;\n\nexport const getMcDon = async () => {\n  const response = await axios.get(\"/restaurants/mc-don\");\n  return response.data;\n};\n\nexport const getKFC = async () => {\n  const response = await axios.get(\"/restaurants/kfc\");\n  return response.data;\n};\n\nexport const getSushi = async () => {\n  const response = await axios.get(\"/restaurants/sushi\");\n  return response.data;\n};\n\nexport const getUkCuisine = async () => {\n  const response = await axios.get(\"/restaurants/uk-cuisine\");\n  return response.data;\n};\n\nexport const getPizza = async () => {\n  const response = await axios.get(\"/restaurants/pizza\");\n  return response.data;\n};\n\nexport const createOrder = async (data) => {\n  const response = await axios.post(\"/orders\", data);\n  return response.data;\n};\n","import { Button, HStack, Input, useNumberInput } from \"@chakra-ui/react\";\nimport { useDispatch } from \"react-redux\";\nimport { increaseCount, decreaseCount } from \"../../redux/cart/cartSlice\";\n\nexport default function AmountInput({ count, id }) {\n  const dispatch = useDispatch();\n\n  const { getInputProps, getIncrementButtonProps, getDecrementButtonProps } =\n    useNumberInput({\n      step: 1,\n      defaultValue: count,\n      min: 1,\n      max: 20,\n    });\n\n  const inc = getIncrementButtonProps();\n  const dec = getDecrementButtonProps();\n  const input = getInputProps();\n\n  return (\n    <HStack maxW=\"160px\" textAlign=\"center\">\n      <Button {...inc} onClick={() => dispatch(increaseCount(id))}>\n        +\n      </Button>\n      <Input {...input} />\n      <Button {...dec} onClick={() => dispatch(decreaseCount(id))}>\n        -\n      </Button>\n    </HStack>\n  );\n}\n","import styled from \"@emotion/styled\";\nimport { ImBin } from \"react-icons/im\";\n\nexport const Bin = styled(ImBin)`\n  color: #f7c200;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    color: #db0038;\n  }\n`;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Box,\n  Image,\n  Table,\n  TableCaption,\n  TableContainer,\n  Tbody,\n  Td,\n  Text,\n  Tfoot,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\";\n\nimport { getProductFromState } from \"../../redux/cart/selectors\";\nimport AmountInput from \"../AmountInput/AmountInput\";\nimport { Bin } from \"./OrderTable.styled\";\nimport { deleteProduct } from \"../../redux/cart/cartSlice\";\n\nexport default function OrderTable() {\n  const dispatch = useDispatch();\n  const products = useSelector(getProductFromState);\n  const totalSum = () => {\n    return products.reduce(\n      (acc, product) => (acc += product.price * product.count),\n      0\n    );\n  };\n \n  return (\n    <Box>\n      {products.length > 0 ? (\n        <TableContainer>\n          <Table variant=\"simple\">\n            <TableCaption>Total sum: ${totalSum()}</TableCaption>\n            <Thead></Thead>\n            <Tbody>\n              {products &&\n                products.map(({ name, id, price, count, image }) => (\n                  <Tr key={id}>\n                    <Td>\n                      <Image\n                        borderRadius=\"4\"\n                        src={image}\n                        width=\"60px\"\n                        height=\"60px\"\n                        objectFit=\"cover\"\n                      />\n                    </Td>\n                    <Td>{name}</Td>\n                    <Td>${price}</Td>\n\n                    <Td>\n                      <AmountInput count={count} id={id} />\n                    </Td>\n                    <Td isNumeric>${price * count}</Td>\n                    <Td>\n                      <Bin onClick={() => dispatch(deleteProduct(id))} />\n                    </Td>\n                  </Tr>\n                ))}\n            </Tbody>\n            <Tfoot></Tfoot>\n          </Table>\n        </TableContainer>\n      ) : (\n        <Text fontSize=\"lg\" textAlign=\"center\" fontWeight=\"500\" color=\"#519dd9\">\n          There are no products in your cart. Add something tasty to make an\n          order!\n        </Text>\n      )}\n    </Box>\n  );\n}\n","import * as yup from \"yup\";\n\nexport const schema = yup\n  .object({\n    name: yup\n      .string()\n      .required(\"Required field\")\n      .matches(\n        /^(?=.{2,30}$)[a-zA-Z]+(?:[-'\\s][a-zA-Z]+)*$/,\n        \"Invalid name format\"\n      ),\n    email: yup\n      .string()\n      .required(\"Required field\")\n      .email(\"Invalid email format\"),\n    phone: yup\n      .string()\n      .required(\"Required field\")\n      .matches(/^[0-9]+$/, \"Invalid number format\")\n      .min(10, \"Phone must be at least 10 characters\")\n      .max(12, \"Phone should be at most 12 characters\"),\n    address: yup\n      .string()\n      .required(\"Required field\")\n      .min(10, \"Address must be at least 10 characters\"),\n  })\n  .required();\n","export const getUserFromState = (state) => state.user.user;\n","import { useEffect, useRef, useState } from \"react\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  Box,\n  Button,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport OrderTable from \"../OrderTable/OrderTable\";\nimport { schema } from \"../../schema\";\nimport { getProductFromState } from \"./../../redux/cart/selectors\";\nimport { createOrder } from \"../../api/api\";\nimport { getUserFromState } from \"./../../redux/user/selectors\";\nimport { addUser } from \"../../redux/user/userSlice\";\nimport { clearCart } from \"../../redux/cart/cartSlice\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function CustomerForm() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const order = useSelector(getProductFromState);\n  const user = useSelector(getUserFromState);\n  const recaptchaRef = useRef();\n  const [isLoading, setIsLoading] = useState(false);\n  const toast = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    mode: \"all\",\n    resolver: yupResolver(schema),\n  });\n\n  useEffect(() => {\n    setValue(\"name\", user.name);\n    setValue(\"email\", user.email);\n    setValue(\"phone\", user.phone);\n    setValue(\"address\", user.address);\n  }, [user, setValue]);\n\n  const onSubmitHandler = async (data) => {\n    try {\n      const recaptchaValue = recaptchaRef.current.getValue();\n\n      if (recaptchaValue) {\n        setIsLoading(true);\n        await dispatch(addUser({ ...data }));\n        await createOrder({ ...data, order, token: recaptchaValue });\n        dispatch(clearCart());\n        navigate(\"/\");\n        return toast({\n          position: \"top-center\",\n          render: () => (\n            <Box color=\"white\" p={3} bg=\"#519dd9\">\n              Got it! Our manager will call you within 10 minutes!\n            </Box>\n          ),\n        });\n      } else {\n        return toast({\n          position: \"top-center\",\n          render: () => (\n            <Box color=\"white\" p={3} bg=\"#519dd9\">\n              Please, let us know that you are not a robot, check the captcha\n              before make an order!\n            </Box>\n          ),\n        });\n      }\n    } catch (error) {\n      return toast({\n        position: \"top-center\",\n        render: () => (\n          <Box color=\"white\" p={3} bg=\"#db0038\">\n            {error.message}\n          </Box>\n        ),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <section>\n      <form onSubmit={handleSubmit(onSubmitHandler)}>\n        <Stack spacing={4} mb={8} mt={8}>\n          <Input placeholder=\"Name\" size=\"md\" {...register(\"name\")} />\n          {errors.name && (\n            <Text color=\"#db0038\" fontSize=\"sm\">\n              {errors.name.message}\n            </Text>\n          )}\n          <Input\n            placeholder=\"Email\"\n            size=\"md\"\n            type=\"email\"\n            {...register(\"email\")}\n          />\n          {errors.email && (\n            <Text color=\"#db0038\" fontSize=\"sm\">\n              {errors.email.message}\n            </Text>\n          )}\n          <InputGroup size=\"md\">\n            <InputLeftAddon children=\"+38\" />\n            <Input\n              type=\"tel\"\n              placeholder=\"Phone number\"\n              {...register(\"phone\")}\n            />\n          </InputGroup>\n          {errors.phone && (\n            <Text color=\"#db0038\" fontSize=\"sm\">\n              {errors.phone.message}\n            </Text>\n          )}\n          <Input placeholder=\"Address\" size=\"md\" {...register(\"address\")} />\n          {errors.address && (\n            <Text color=\"#db0038\" fontSize=\"sm\">\n              {errors.address.message}\n            </Text>\n          )}\n        </Stack>\n\n        <OrderTable />\n        {order.length > 0 && (\n          <>\n            <ReCAPTCHA\n              sitekey={process.env.REACT_APP_GOOGLE_CAPTCHA_SITE_KEY}\n              ref={recaptchaRef}\n            />\n            <Button\n              colorScheme=\"blue\"\n              type=\"submit\"\n              ml=\"auto\"\n              display=\"block\"\n              isLoading={isLoading}\n            >\n              Make an order\n            </Button>\n          </>\n        )}\n      </form>\n    </section>\n  );\n}\n","export const address = {\n  \"McDonald's\": { lat: 50.45133455590493, lng: 30.52154065231919 },\n  KFC: { lat: 50.4518845094562, lng: 30.52582146017646 },\n  pizza: { lat: 50.45202113583062, lng: 30.523879541076965 },\n  Sushi: { lat: 50.44930902848304, lng: 30.530387883859117 },\n  \"Ukrainian cuisine\": { lat: 50.449076750097596, lng: 30.522191054069 },\n};\n","import { useMemo, useState, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  MarkerF,\n  Polyline,\n} from \"@react-google-maps/api\";\nimport haversine from \"haversine-distance\";\nimport { Box, useToast } from \"@chakra-ui/react\";\n\nimport { setAddress } from \"../../redux/user/userSlice\";\nimport { getCategoryFromState } from \"../../redux/cart/selectors\";\nimport { address } from \"../../data/address\";\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"400px\",\n};\n\nexport default function Map() {\n  const dispatch = useDispatch();\n  const category = useSelector(getCategoryFromState);\n  const toast = useToast();\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const [distance, setDistance] = useState(0);\n  const { isLoaded } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n  });\n\n  const approxTime = useCallback(() => {\n    return toast({\n      position: \"top-center\",\n      render: () => (\n        <Box color=\"white\" p={3} bg=\"#53bac1\">\n          Approximate delivery time is{\" \"}\n          {((distance.toFixed(2) / 50) * 600).toFixed(0)} min\n        </Box>\n      ),\n    });\n  }, [distance, toast]);\n\n  useEffect(() => {\n    if (!distance) {\n      return;\n    }\n    approxTime();\n  }, [approxTime, distance]);\n\n  const center = useMemo(() => ({ lat: 50.45, lng: 30.523 }), []);\n  const marker = address[category];\n\n  const path = [marker, markerPosition];\n  const handleMapClick = useCallback(\n    (event) => {\n      const { latLng } = event;\n      setMarkerPosition({\n        lat: latLng.lat(),\n        lng: latLng.lng(),\n      });\n\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({ location: latLng }, (results, status) => {\n        if (status === \"OK\" && results[0]) {\n          dispatch(setAddress(results[0].formatted_address));\n        }\n      });\n      if (category) {\n        const distanceInMeters = haversine(marker, {\n          latitude: latLng.lat(),\n          longitude: latLng.lng(),\n        });\n\n        const distanceInKilometers = distanceInMeters / 1000;\n\n        setDistance(distanceInKilometers);\n      }\n    },\n    [dispatch, marker, category]\n  );\n\n  if (!isLoaded) return <h1>Loading...</h1>;\n  const options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 30000,\n    zIndex: 1,\n  };\n\n  return (\n    <div>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={12}\n        onClick={handleMapClick}\n      >\n        {markerPosition && <MarkerF position={markerPosition} />}\n        {category && <MarkerF position={marker} label={category} />}\n        {category && markerPosition && (\n          <Polyline path={path} options={options} />\n        )}\n      </GoogleMap>\n    </div>\n  );\n}\n","import CustomerForm from \"../../components/CustomerForm/CustomerForm\";\nimport Map from \"../../components/Map/Map\";\nimport { Container } from \"./../Restaurants/Restaurants.styled\";\n\nexport default function Cart() {\n  return (\n    <main>\n      <Container>\n        <Map />\n        <CustomerForm />\n      </Container>\n    </main>\n  );\n}\n"],"names":["axios","getMcDon","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","sent","abrupt","data","stop","apply","arguments","getKFC","_ref2","_callee2","_context2","getSushi","_ref3","_callee3","_context3","getUkCuisine","_ref4","_callee4","_context4","getPizza","_ref5","_callee5","_context5","createOrder","_ref6","_callee6","_context6","_x","AmountInput","count","id","dispatch","useDispatch","_useNumberInput","useNumberInput","step","defaultValue","min","max","getInputProps","getIncrementButtonProps","getDecrementButtonProps","inc","dec","input","_jsxs","HStack","maxW","textAlign","children","_jsx","Button","_objectSpread","onClick","increaseCount","Input","decreaseCount","Bin","styled","ImBin","_templateObject","_taggedTemplateLiteral","OrderTable","products","useSelector","getProductFromState","Box","length","TableContainer","Table","variant","TableCaption","reduce","acc","product","price","Thead","Tbody","map","name","image","Tr","Td","Image","borderRadius","src","width","height","objectFit","isNumeric","deleteProduct","Tfoot","Text","fontSize","fontWeight","color","schema","yup","required","matches","email","phone","address","getUserFromState","state","user","CustomerForm","navigate","useNavigate","order","recaptchaRef","useRef","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","toast","useToast","_useForm","useForm","mode","resolver","yupResolver","register","handleSubmit","errors","formState","setValue","useEffect","onSubmitHandler","recaptchaValue","current","getValue","addUser","token","clearCart","position","render","p","bg","t0","message","finish","onSubmit","Stack","spacing","mb","mt","placeholder","size","type","InputGroup","InputLeftAddon","_Fragment","ReCAPTCHA","sitekey","process","ref","colorScheme","ml","display","lat","lng","KFC","pizza","Sushi","containerStyle","Map","category","getCategoryFromState","markerPosition","setMarkerPosition","_useState3","_useState4","distance","setDistance","isLoaded","useLoadScript","googleMapsApiKey","approxTime","useCallback","toFixed","center","useMemo","marker","path","handleMapClick","event","latLng","window","google","maps","Geocoder","geocode","location","results","status","setAddress","formatted_address","distanceInMeters","haversine","latitude","longitude","GoogleMap","mapContainerStyle","zoom","MarkerF","label","Polyline","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","Cart","Container"],"sourceRoot":""}